{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["ocbW9vDt6iVp","yMz0FjVMLix2","wcw-HuJ1NDwY","3t3iHrv56oUX","nJybM0ptP-7f","ZWCkzphtX7pI","5XeNr7l3ZJ16","IvS5lgJ2aQFv"],"mount_file_id":"1ocOJa1xzfyttYUJM1nA7HKQKvYWJdew2","authorship_tag":"ABX9TyN/ZAEJT6gn5SjVoKhAIEZ8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Restaurant Revenue Prediction**"],"metadata":{"id":"kQS1JNma2Cx9"}},{"cell_type":"markdown","source":["###Dataset Description\n","TFI has provided a dataset with 137 restaurants in the training set, and a test set of 100000 restaurants. The data columns include the open date, location, city type, and three categories of obfuscated data: Demographic data, Real estate data, and Commercial data. The revenue column indicates a (transformed) revenue of the restaurant in a given year and is the target of predictive analysis.\n","\n","###File descriptions\n","train.csv - the training set. Use this dataset for training your model.\n","test.csv - the test set. To deter manual \"guess\" predictions, Kaggle has supplemented the test set with additional \"ignored\" data. These are not counted in the scoring.\n","sampleSubmission.csv - a sample submission file in the correct format\n","\n","###Data fields\n","#####Id : Restaurant id.\n","#####Open Date : opening date for a restaurant\n","#####City : City that the restaurant is in. Note that there are unicode in the names.\n","#####City Group: Type of the city. Big cities, or Other.\n","#####Type: Type of the restaurant. FC: Food Court, IL: Inline,\n","#####DT: Drive Thru, MB: Mobile\n","#####P1, P2 - P37: There are three categories of these obfuscated data. Demographic data are gathered from third party providers with GIS systems. These include population in any given area, age and gender distribution, development scales. Real estate data mainly relate to the m2 of the location, front facade of the location, car park availability. Commercial data mainly include the existence of points of interest including schools, banks, other QSR operators.\n","#####Revenue: The revenue column indicates a (transformed) revenue of the restaurant in a given year and is the target of predictive analysis.\n","Please note that the values are transformed so they don't mean real dollar values."],"metadata":{"id":"ID_MF_X12Nyt"}},{"cell_type":"markdown","source":["##Loading Data"],"metadata":{"id":"zbE9BUBo2pVp"}},{"cell_type":"code","execution_count":87,"metadata":{"id":"5DxRvgib1_gP","executionInfo":{"status":"ok","timestamp":1700776759861,"user_tz":420,"elapsed":187,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import LabelEncoder\n","pd.set_option('display.max_columns',None)#displaying long list of columns\n","pd.set_option('display.max_rows', None)#displaying long list of rows\n","pd.set_option('display.width', 1000)#width of window\n"]},{"cell_type":"code","source":["!pip install vecstack\n","\n","from vecstack import stacking\n","import pandas as pd\n","import numpy as np\n","\n","\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.metrics import mean_squared_error\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.model_selection import cross_val_score\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HS9eJDyC53-7","executionInfo":{"status":"ok","timestamp":1700776769863,"user_tz":420,"elapsed":8319,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"48eebba3-d7fe-4cf7-ed46-b12d83f419b4"},"execution_count":88,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: vecstack in /usr/local/lib/python3.10/dist-packages (0.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from vecstack) (1.23.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from vecstack) (1.11.3)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.10/dist-packages (from vecstack) (1.2.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->vecstack) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->vecstack) (3.2.0)\n"]}]},{"cell_type":"code","source":["trainfile = r'/content/drive/MyDrive/CIS508/HW4/train.csv'\n","trainData = pd.read_csv(trainfile)  #creates a dataframe\n","testfile = r'/content/drive/MyDrive/CIS508/HW4/test.csv'\n","testData = pd.read_csv(testfile)  #creates a dataframe\n","print(trainData.shape)\n","print(testData.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x7x6Lu9a1_1D","executionInfo":{"status":"ok","timestamp":1700776771665,"user_tz":420,"elapsed":1806,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"22109fd6-724b-4a52-8103-212ee9d1a815"},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["(137, 43)\n","(100000, 42)\n"]}]},{"cell_type":"code","source":["trainData.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UTte33uQ4zNb","executionInfo":{"status":"ok","timestamp":1700552183826,"user_tz":420,"elapsed":231,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"036866b0-91e5-409e-ca89-ad6a71545071"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id   Open Date        City  City Group Type  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32  P33  P34  P35  P36  P37    revenue\n","0   0  07/17/1999    İstanbul  Big Cities   IL   4  5.0  4.0  4.0   2   2   5   4   5    5    3    5  5.0    1    2    2    2    4    5    4    1    3    3    1    1  1.0  4.0  2.0  3.0    5    3    4    5    5    4    3    4  5653753.0\n","1   1  02/14/2008      Ankara  Big Cities   FC   4  5.0  4.0  4.0   1   2   5   5   5    5    1    5  5.0    0    0    0    0    0    3    2    1    3    2    0    0  0.0  0.0  3.0  3.0    0    0    0    0    0    0    0    0  6923131.0\n","2   2  03/09/2013  Diyarbakır       Other   IL   2  4.0  2.0  5.0   2   3   5   5   5    5    2    5  5.0    0    0    0    0    0    1    1    1    1    1    0    0  0.0  0.0  1.0  3.0    0    0    0    0    0    0    0    0  2055379.0\n","3   3  02/02/2012       Tokat       Other   IL   6  4.5  6.0  6.0   4   4  10   8  10   10    8   10  7.5    6    4    9    3   12   20   12    6    1   10    2    2  2.5  2.5  2.5  7.5   25   12   10    6   18   12   12    6  2675511.0\n","4   4  05/09/2009   Gaziantep       Other   IL   3  4.0  3.0  4.0   2   2   5   5   5    5    2    5  5.0    2    1    2    1    4    2    2    1    2    1    2    3  3.0  5.0  1.0  3.0    5    1    3    2    3    4    3    3  4316715.0"],"text/html":["\n","  <div id=\"df-23c744cc-e9f7-4835-87ce-7e599bbffb71\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>Open Date</th>\n","      <th>City</th>\n","      <th>City Group</th>\n","      <th>Type</th>\n","      <th>P1</th>\n","      <th>P2</th>\n","      <th>P3</th>\n","      <th>P4</th>\n","      <th>P5</th>\n","      <th>P6</th>\n","      <th>P7</th>\n","      <th>P8</th>\n","      <th>P9</th>\n","      <th>P10</th>\n","      <th>P11</th>\n","      <th>P12</th>\n","      <th>P13</th>\n","      <th>P14</th>\n","      <th>P15</th>\n","      <th>P16</th>\n","      <th>P17</th>\n","      <th>P18</th>\n","      <th>P19</th>\n","      <th>P20</th>\n","      <th>P21</th>\n","      <th>P22</th>\n","      <th>P23</th>\n","      <th>P24</th>\n","      <th>P25</th>\n","      <th>P26</th>\n","      <th>P27</th>\n","      <th>P28</th>\n","      <th>P29</th>\n","      <th>P30</th>\n","      <th>P31</th>\n","      <th>P32</th>\n","      <th>P33</th>\n","      <th>P34</th>\n","      <th>P35</th>\n","      <th>P36</th>\n","      <th>P37</th>\n","      <th>revenue</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>07/17/1999</td>\n","      <td>İstanbul</td>\n","      <td>Big Cities</td>\n","      <td>IL</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5653753.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>02/14/2008</td>\n","      <td>Ankara</td>\n","      <td>Big Cities</td>\n","      <td>FC</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6923131.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>03/09/2013</td>\n","      <td>Diyarbakır</td>\n","      <td>Other</td>\n","      <td>IL</td>\n","      <td>2</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2055379.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>02/02/2012</td>\n","      <td>Tokat</td>\n","      <td>Other</td>\n","      <td>IL</td>\n","      <td>6</td>\n","      <td>4.5</td>\n","      <td>6.0</td>\n","      <td>6.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>7.5</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>3</td>\n","      <td>12</td>\n","      <td>20</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2.5</td>\n","      <td>2.5</td>\n","      <td>2.5</td>\n","      <td>7.5</td>\n","      <td>25</td>\n","      <td>12</td>\n","      <td>10</td>\n","      <td>6</td>\n","      <td>18</td>\n","      <td>12</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>2675511.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>05/09/2009</td>\n","      <td>Gaziantep</td>\n","      <td>Other</td>\n","      <td>IL</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4316715.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23c744cc-e9f7-4835-87ce-7e599bbffb71')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-23c744cc-e9f7-4835-87ce-7e599bbffb71 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-23c744cc-e9f7-4835-87ce-7e599bbffb71');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3bb2bc49-9990-40d6-a068-8736fff565ac\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bb2bc49-9990-40d6-a068-8736fff565ac')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3bb2bc49-9990-40d6-a068-8736fff565ac button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":572}]},{"cell_type":"code","source":["testData.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dKqeCZbvMVHT","executionInfo":{"status":"ok","timestamp":1700552183827,"user_tz":420,"elapsed":6,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"d95eba27-cf6c-4cf8-8978-e542da70e9f2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id   Open Date            City  City Group Type  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32  P33  P34  P35  P36  P37\n","0   0  01/22/2011           Niğde       Other   FC   1  4.0  4.0  4.0   1   2   5   4   5    5    5    3  4.0    0    0    0    2    0    5    5    3    1    4    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0\n","1   1  03/18/2011           Konya       Other   IL   3  4.0  4.0  4.0   2   2   5   3   4    4    2    4  5.0    0    0    0    0    0    5    5    3    2    1    0    0  0.0  0.0  1.0  3.0    0    0    0    0    0    0    0    0\n","2   2  10/30/2013          Ankara  Big Cities   FC   3  4.0  4.0  4.0   2   2   5   4   4    5    4    5  5.0    0    0    0    0    0    5    5    5    5    5    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0\n","3   3  05/06/2013         Kocaeli       Other   IL   2  4.0  4.0  4.0   2   3   5   4   5    4    3    4  5.0    0    0    0    0    4    4    4    3    2    2    0    0  0.0  0.0  2.0  3.0    0    4    0    0    0    0    0    0\n","4   4  07/31/2013  Afyonkarahisar       Other   FC   2  4.0  4.0  4.0   1   2   5   4   5    4    3    5  4.0    0    0    0    0    0    1    5    3    1    1    0    0  0.0  0.0  5.0  3.0    0    0    0    0    0    0    0    0"],"text/html":["\n","  <div id=\"df-f3ee081b-1b88-4cd9-a7c5-99c692641b40\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>Open Date</th>\n","      <th>City</th>\n","      <th>City Group</th>\n","      <th>Type</th>\n","      <th>P1</th>\n","      <th>P2</th>\n","      <th>P3</th>\n","      <th>P4</th>\n","      <th>P5</th>\n","      <th>P6</th>\n","      <th>P7</th>\n","      <th>P8</th>\n","      <th>P9</th>\n","      <th>P10</th>\n","      <th>P11</th>\n","      <th>P12</th>\n","      <th>P13</th>\n","      <th>P14</th>\n","      <th>P15</th>\n","      <th>P16</th>\n","      <th>P17</th>\n","      <th>P18</th>\n","      <th>P19</th>\n","      <th>P20</th>\n","      <th>P21</th>\n","      <th>P22</th>\n","      <th>P23</th>\n","      <th>P24</th>\n","      <th>P25</th>\n","      <th>P26</th>\n","      <th>P27</th>\n","      <th>P28</th>\n","      <th>P29</th>\n","      <th>P30</th>\n","      <th>P31</th>\n","      <th>P32</th>\n","      <th>P33</th>\n","      <th>P34</th>\n","      <th>P35</th>\n","      <th>P36</th>\n","      <th>P37</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>01/22/2011</td>\n","      <td>Niğde</td>\n","      <td>Other</td>\n","      <td>FC</td>\n","      <td>1</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>03/18/2011</td>\n","      <td>Konya</td>\n","      <td>Other</td>\n","      <td>IL</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>10/30/2013</td>\n","      <td>Ankara</td>\n","      <td>Big Cities</td>\n","      <td>FC</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>05/06/2013</td>\n","      <td>Kocaeli</td>\n","      <td>Other</td>\n","      <td>IL</td>\n","      <td>2</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>07/31/2013</td>\n","      <td>Afyonkarahisar</td>\n","      <td>Other</td>\n","      <td>FC</td>\n","      <td>2</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>4.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3ee081b-1b88-4cd9-a7c5-99c692641b40')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f3ee081b-1b88-4cd9-a7c5-99c692641b40 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f3ee081b-1b88-4cd9-a7c5-99c692641b40');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6ec78228-e3dd-40b9-8acb-7542eca28f7e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6ec78228-e3dd-40b9-8acb-7542eca28f7e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6ec78228-e3dd-40b9-8acb-7542eca28f7e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":573}]},{"cell_type":"markdown","source":["##Data Preprocessing"],"metadata":{"id":"HWFANP0D2tX6"}},{"cell_type":"markdown","source":["### Missing Value"],"metadata":{"id":"ocbW9vDt6iVp"}},{"cell_type":"code","source":["#  Check if any null values in dataframe\n","trainData.isnull().sum().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mTcK0xo02xAx","executionInfo":{"status":"ok","timestamp":1700552183827,"user_tz":420,"elapsed":5,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"da684397-3f31-4497-c2e1-bf332f4fbeeb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":574}]},{"cell_type":"markdown","source":["####If there is null value, you have to do the below steps to deal with the missing value"],"metadata":{"id":"yMz0FjVMLix2"}},{"cell_type":"code","source":["#Extract Target Column before doing missing value substitutions and one-hot encoding======\n","Target_Train_Cols = trainData[\"revenue\"]#make copy of target column\n","trainData = trainData.drop([\"revenue\"], axis=1) #extracting training data without the target column\n","\n","print(trainData.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"otoP8RQR2xPg","executionInfo":{"status":"ok","timestamp":1700552158073,"user_tz":420,"elapsed":2,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"4dde6b27-dbaf-46b3-b396-1213ec483f5a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(137, 42)\n"]}]},{"cell_type":"code","source":["#DROP COLUMNS WITH LOTS OF MISSING VALUES===============================\n","#CAN ALSO DROP ROWS WITH LOTS OF MISSING VALUES\n","#Combine Train data and test data first so that the SAME COLUMNS are DROPPED in each\n","combined_Data = pd.concat([trainData, testData], keys=[0,1])\n","\n","combined_Data.isnull().sum().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HAa0eIW94_K5","executionInfo":{"status":"ok","timestamp":1700552158476,"user_tz":420,"elapsed":405,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"86491b8f-caf0-4152-b093-a9a11b7bdfbd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Id            0\n","P27           0\n","P19           0\n","P20           0\n","P21           0\n","P22           0\n","P23           0\n","P24           0\n","P25           0\n","P26           0\n","P28           0\n","Open Date     0\n","P29           0\n","P30           0\n","P31           0\n","P32           0\n","P33           0\n","P34           0\n","P35           0\n","P36           0\n","P18           0\n","P17           0\n","P16           0\n","P15           0\n","City          0\n","City Group    0\n","Type          0\n","P1            0\n","P2            0\n","P3            0\n","P4            0\n","P5            0\n","P6            0\n","P7            0\n","P8            0\n","P9            0\n","P10           0\n","P11           0\n","P12           0\n","P13           0\n","P14           0\n","P37           0\n","dtype: int64"]},"metadata":{},"execution_count":564}]},{"cell_type":"code","source":["#Define threshold for dropping columns\n","percent=int(0.6*(combined_Data.shape[0]))\n","print(percent)\n","#Drop columns that have less than \"thresh\" number of non_Nans\n","td1=combined_Data.dropna(thresh=percent,axis=1)\n","print(td1.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WFkhBLgG5Dxa","executionInfo":{"status":"ok","timestamp":1700552158476,"user_tz":420,"elapsed":2,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"bf74b33c-ab5d-4890-aa70-9022526ba8ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["60082\n","(100137, 42)\n"]}]},{"cell_type":"code","source":["#look at what other columns have missing values\n","td1.isnull().sum().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fTwybjCy5Int","executionInfo":{"status":"ok","timestamp":1700552158661,"user_tz":420,"elapsed":186,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"b0098f8f-835d-415c-a7cc-961bc28039a1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Id            0\n","P27           0\n","P19           0\n","P20           0\n","P21           0\n","P22           0\n","P23           0\n","P24           0\n","P25           0\n","P26           0\n","P28           0\n","Open Date     0\n","P29           0\n","P30           0\n","P31           0\n","P32           0\n","P33           0\n","P34           0\n","P35           0\n","P36           0\n","P18           0\n","P17           0\n","P16           0\n","P15           0\n","City          0\n","City Group    0\n","Type          0\n","P1            0\n","P2            0\n","P3            0\n","P4            0\n","P5            0\n","P6            0\n","P7            0\n","P8            0\n","P9            0\n","P10           0\n","P11           0\n","P12           0\n","P13           0\n","P14           0\n","P37           0\n","dtype: int64"]},"metadata":{},"execution_count":566}]},{"cell_type":"code","source":["#NOW IMPUTE MISSING VALUES FOR THE OTHER COLUMNS=========================\n","#IMPUTE (SUBSTITUTE) MEAN VALUES FOR NaN IN NUMERIC COLUMNS\n","numeric=td1.select_dtypes(include=['int','float64']).columns\n","for num in numeric:\n","  td1[num]=td1[num].fillna(td1[num].mean())\n","\n","#IMPUTE (SUBSTITUTE) MODE VALUES FOR NaN IN CATEGORICAL COLUMNS\n","train_cat_cols = td1.select_dtypes(exclude=['int','float64']).columns#selecting the categorical columns\n","for colss in train_cat_cols:\n","  if(td1.iloc[0][colss]==\"N\"):\n","        td1[colss]=td1[colss].fillna(\"N\")\n","  else:\n","    td1[colss]=td1[colss].fillna(td1[colss].mode())\n","\n","print(td1.head(20))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T4UGO6s85Mw-","executionInfo":{"status":"ok","timestamp":1700552159032,"user_tz":420,"elapsed":372,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"486c28cc-a858-4eb3-8cc2-e6aeaacb7b7a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      Id   Open Date            City  City Group Type  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25   P26  P27   P28  P29  P30  P31  P32  P33  P34  P35  P36  P37\n","0 0    0  07/17/1999        İstanbul  Big Cities   IL   4  5.0  4.0  4.0   2   2   5   4   5    5    3    5  5.0    1    2    2    2    4    5    4    1    3    3    1    1   1.0  4.0   2.0  3.0    5    3    4    5    5    4    3    4\n","  1    1  02/14/2008          Ankara  Big Cities   FC   4  5.0  4.0  4.0   1   2   5   5   5    5    1    5  5.0    0    0    0    0    0    3    2    1    3    2    0    0   0.0  0.0   3.0  3.0    0    0    0    0    0    0    0    0\n","  2    2  03/09/2013      Diyarbakır       Other   IL   2  4.0  2.0  5.0   2   3   5   5   5    5    2    5  5.0    0    0    0    0    0    1    1    1    1    1    0    0   0.0  0.0   1.0  3.0    0    0    0    0    0    0    0    0\n","  3    3  02/02/2012           Tokat       Other   IL   6  4.5  6.0  6.0   4   4  10   8  10   10    8   10  7.5    6    4    9    3   12   20   12    6    1   10    2    2   2.5  2.5   2.5  7.5   25   12   10    6   18   12   12    6\n","  4    4  05/09/2009       Gaziantep       Other   IL   3  4.0  3.0  4.0   2   2   5   5   5    5    2    5  5.0    2    1    2    1    4    2    2    1    2    1    2    3   3.0  5.0   1.0  3.0    5    1    3    2    3    4    3    3\n","  5    5  02/12/2010          Ankara  Big Cities   FC   6  6.0  4.5  7.5   8  10  10   8   8    8   10    8  6.0    0    0    0    0    0    5    6    3    1    5    0    0   0.0  0.0   7.5  5.0    0    0    0    0    0    0    0    0\n","  6    6  10/11/2010        İstanbul  Big Cities   IL   2  3.0  4.0  4.0   1   5   5   5   5    5    2    5  5.0    3    4    4    3    4    2    4    1    2    1    5    4   4.0  5.0   1.0  3.0    4    5    2    2    3    5    4    4\n","  7    7  06/21/2011        İstanbul  Big Cities   IL   4  5.0  4.0  5.0   2   3   5   4   4    4    4    3  4.0    0    0    0    0    0    3    5    2    4    2    0    0   0.0  0.0   3.0  2.0    0    0    0    0    0    0    0    0\n","  8    8  08/28/2010  Afyonkarahisar       Other   IL   1  1.0  4.0  4.0   1   2   1   5   5    5    1    5  5.0    1    1    2    1    4    1    1    1    1    1    4    4   4.0  2.0   2.0  3.0    4    5    5    3    4    5    4    5\n","  9    9  11/16/2011          Edirne       Other   IL   6  4.5  6.0  7.5   6   4  10  10  10   10    2   10  7.5    0    0    0    0    0   25    3    3    1   10    0    0   0.0  0.0   5.0  2.5    0    0    0    0    0    0    0    0\n","  10  10  08/09/2013         Kocaeli       Other   FC   9  6.0  6.0  6.0   4   4  10   8  10   10    8   10  7.5    0    0    0    0    0   25   15   15    3   20    0    0   0.0  0.0  10.0  2.5    0    0    0    0    0    0    0    0\n","  11  11  05/22/2012        İstanbul  Big Cities   IL   2  4.0  4.0  4.0   2   5   5   5   5    5    2    5  5.0    2    2    5    2    4    2    5    1    1    3    5    2   3.0  5.0   3.0  3.0    5    5    4    2    3    4    4    2\n","  12  12  02/28/2013          Ankara  Big Cities   IL   2  2.0  4.0  4.0   2   1   5   4   5    5    3    5  5.0    0    0    0    0    0    3    4    1    2    2    0    0   0.0  0.0   1.0  3.0    0    0    0    0    0    0    0    0\n","  13  13  10/16/2010        İstanbul  Big Cities   FC   4  5.0  4.0  4.0   1   3   5   5   5    5    2    5  5.0    0    0    0    0    0    3    4    1    2    1    0    0   0.0  0.0   3.0  3.0    0    0    0    0    0    0    0    0\n","  14  14  12/29/2011           Bursa       Other   FC   2  2.0  4.0  4.0   1   2   5   5   5    5    2    5  5.0    0    0    0    0    0    3    3    1    3    2    0    0   0.0  0.0   2.0  3.0    0    0    0    0    0    0    0    0\n","  15  15  02/07/2012        İstanbul  Big Cities   IL  12  7.5  6.0  6.0   2  10  10  10  10   10    4   10  7.5    3   10   15    3   12   10    9    3    2    5    8    8  10.0  2.5   7.5  7.5    5   15   20    2   12    3   16    4\n","  16  16  01/07/2000        İstanbul  Big Cities   FC   3  5.0  4.0  4.0   2   5   5   4   5    4    3    5  4.0    0    0    0    0    0    1    4    1    1    1    0    0   0.0  0.0   2.0  2.0    0    0    0    0    0    0    0    0\n","  17  17  11/08/2009        İstanbul  Big Cities   FC   2  4.0  4.0  5.0   1   3   5   4   5    5    3    5  5.0    0    0    0    0    0    1    1    1    1    1    0    0   0.0  0.0   1.0  1.0    0    0    0    0    0    0    0    0\n","  18  18  04/21/2012           İzmir  Big Cities   IL   4  5.0  4.0  3.0   1   2   5   5   5    5    2    5  5.0    3    2    3    2    3    4    5    1    4    2    5    3   3.0  3.0   2.0  3.0    3    5    5    4    4    4    3    2\n","  19  19  08/16/2011         Sakarya       Other   IL   2  4.0  4.0  4.0   2   2   5   5   4    4    1    3  4.0    0    0    0    0    0    2    1    1    1    1    0    0   0.0  0.0   2.0  3.0    0    0    0    0    0    0    0    0\n"]}]},{"cell_type":"code","source":["#CHECK IF THERE ARE ANY REMAINING MISSING VALUES\n","td1.isnull().sum().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":348},"id":"ZOX5FeFO5Uwi","executionInfo":{"status":"error","timestamp":1700552159359,"user_tz":420,"elapsed":328,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"9aec1786-98f5-4de7-b783-f0a81353040e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-568-d8c29bf49f22>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#CHECK IF THERE ARE ANY REMAINING MISSING VALUES\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtd1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnull\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mascending\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36misnull\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   6385\u001b[0m         \u001b[0mDataFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnull\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0man\u001b[0m \u001b[0malias\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6386\u001b[0m         \"\"\"\n\u001b[0;32m-> 6387\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6389\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mdoc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNDFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnotna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_shared_doc_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"klass\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36misna\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   6377\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mdoc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNDFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_shared_doc_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"klass\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6378\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6379\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6380\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"isna\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6381\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/base.py\u001b[0m in \u001b[0;36misna\u001b[0;34m(self, func)\u001b[0m\n\u001b[1;32m    141\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"apply\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;31m# --------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    350\u001b[0m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 352\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    354\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_failures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, **kwargs)\u001b[0m\n\u001b[1;32m    349\u001b[0m         \u001b[0mone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m         \"\"\"\n\u001b[0;32m--> 351\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    352\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_split_op_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36misna\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m    183\u001b[0m     \u001b[0mName\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m     \"\"\"\n\u001b[0;32m--> 185\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_isna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36m_isna\u001b[0;34m(obj, inf_as_na)\u001b[0m\n\u001b[1;32m    212\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mABCExtensionArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_isna_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mABCIndex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;31m# Try to use cached isna, which also short-circuits for integer dtypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36m_isna_array\u001b[0;34m(values, inf_as_na)\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[assignment]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mis_string_or_object_np_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_isna_string_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mneeds_i8_conversion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m         \u001b[0;31m# this is the NaT pattern\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36m_isna_string_dtype\u001b[0;34m(values, inf_as_na)\u001b[0m\n\u001b[1;32m    318\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibmissing\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnaobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 320\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibmissing\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnaobj2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    321\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m             \u001b[0;31m# 0-D, reached via e.g. mask_missing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["### Data type"],"metadata":{"id":"wcw-HuJ1NDwY"}},{"cell_type":"markdown","source":["1. Extract month, day, and year into separate columns from 'Open Date' column"],"metadata":{"id":"JasrjLqa3z9Z"}},{"cell_type":"code","source":["# Convert 'Open Date' to datetime format\n","trainData['Open Date'] = pd.to_datetime(trainData['Open Date'])\n","testData['Open Date'] = pd.to_datetime(testData['Open Date'])\n","\n","# Extract month, day, and year into separate columns\n","trainData['Open Month'] = trainData['Open Date'].dt.month\n","trainData['Open Day'] = trainData['Open Date'].dt.day\n","trainData['Open Year'] = trainData['Open Date'].dt.year\n","\n","testData['Open Month'] = testData['Open Date'].dt.month\n","testData['Open Day'] = testData['Open Date'].dt.day\n","testData['Open Year'] = testData['Open Date'].dt.year\n","\n","# Drop the original 'Open Date' column\n","trainData = trainData.drop('Open Date', axis=1)\n","testData = testData.drop('Open Date', axis=1)\n","\n","# Display the updated DataFrames\n","print(trainData.head())\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_4bWLQ4dNC-I","executionInfo":{"status":"ok","timestamp":1700776775285,"user_tz":420,"elapsed":533,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"966a8ebf-30aa-498c-8392-2e1e722d162d"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id        City  City Group Type  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32  P33  P34  P35  P36  P37    revenue  Open Month  Open Day  Open Year\n","0   0    İstanbul  Big Cities   IL   4  5.0  4.0  4.0   2   2   5   4   5    5    3    5  5.0    1    2    2    2    4    5    4    1    3    3    1    1  1.0  4.0  2.0  3.0    5    3    4    5    5    4    3    4  5653753.0           7        17       1999\n","1   1      Ankara  Big Cities   FC   4  5.0  4.0  4.0   1   2   5   5   5    5    1    5  5.0    0    0    0    0    0    3    2    1    3    2    0    0  0.0  0.0  3.0  3.0    0    0    0    0    0    0    0    0  6923131.0           2        14       2008\n","2   2  Diyarbakır       Other   IL   2  4.0  2.0  5.0   2   3   5   5   5    5    2    5  5.0    0    0    0    0    0    1    1    1    1    1    0    0  0.0  0.0  1.0  3.0    0    0    0    0    0    0    0    0  2055379.0           3         9       2013\n","3   3       Tokat       Other   IL   6  4.5  6.0  6.0   4   4  10   8  10   10    8   10  7.5    6    4    9    3   12   20   12    6    1   10    2    2  2.5  2.5  2.5  7.5   25   12   10    6   18   12   12    6  2675511.0           2         2       2012\n","4   4   Gaziantep       Other   IL   3  4.0  3.0  4.0   2   2   5   5   5    5    2    5  5.0    2    1    2    1    4    2    2    1    2    1    2    3  3.0  5.0  1.0  3.0    5    1    3    2    3    4    3    3  4316715.0           5         9       2009\n","   Id            City  City Group Type  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32  P33  P34  P35  P36  P37  Open Month  Open Day  Open Year\n","0   0           Niğde       Other   FC   1  4.0  4.0  4.0   1   2   5   4   5    5    5    3  4.0    0    0    0    2    0    5    5    3    1    4    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0           1        22       2011\n","1   1           Konya       Other   IL   3  4.0  4.0  4.0   2   2   5   3   4    4    2    4  5.0    0    0    0    0    0    5    5    3    2    1    0    0  0.0  0.0  1.0  3.0    0    0    0    0    0    0    0    0           3        18       2011\n","2   2          Ankara  Big Cities   FC   3  4.0  4.0  4.0   2   2   5   4   4    5    4    5  5.0    0    0    0    0    0    5    5    5    5    5    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0          10        30       2013\n","3   3         Kocaeli       Other   IL   2  4.0  4.0  4.0   2   3   5   4   5    4    3    4  5.0    0    0    0    0    4    4    4    3    2    2    0    0  0.0  0.0  2.0  3.0    0    4    0    0    0    0    0    0           5         6       2013\n","4   4  Afyonkarahisar       Other   FC   2  4.0  4.0  4.0   1   2   5   4   5    4    3    5  4.0    0    0    0    0    0    1    5    3    1    1    0    0  0.0  0.0  5.0  3.0    0    0    0    0    0    0    0    0           7        31       2013\n"]}]},{"cell_type":"markdown","source":["2. Append a column 'revenue' in testData"],"metadata":{"id":"_WHpg3u44AT1"}},{"cell_type":"code","source":["testData['revenue'] = 0\n","\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"alFnxtwiL-oH","executionInfo":{"status":"ok","timestamp":1700776775285,"user_tz":420,"elapsed":4,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"ca64b771-956c-44ed-efcf-f7f562165b19"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id            City  City Group Type  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32  P33  P34  P35  P36  P37  Open Month  Open Day  Open Year  revenue\n","0   0           Niğde       Other   FC   1  4.0  4.0  4.0   1   2   5   4   5    5    5    3  4.0    0    0    0    2    0    5    5    3    1    4    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0           1        22       2011        0\n","1   1           Konya       Other   IL   3  4.0  4.0  4.0   2   2   5   3   4    4    2    4  5.0    0    0    0    0    0    5    5    3    2    1    0    0  0.0  0.0  1.0  3.0    0    0    0    0    0    0    0    0           3        18       2011        0\n","2   2          Ankara  Big Cities   FC   3  4.0  4.0  4.0   2   2   5   4   4    5    4    5  5.0    0    0    0    0    0    5    5    5    5    5    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0          10        30       2013        0\n","3   3         Kocaeli       Other   IL   2  4.0  4.0  4.0   2   3   5   4   5    4    3    4  5.0    0    0    0    0    4    4    4    3    2    2    0    0  0.0  0.0  2.0  3.0    0    4    0    0    0    0    0    0           5         6       2013        0\n","4   4  Afyonkarahisar       Other   FC   2  4.0  4.0  4.0   1   2   5   4   5    4    3    5  4.0    0    0    0    0    0    1    5    3    1    1    0    0  0.0  0.0  5.0  3.0    0    0    0    0    0    0    0    0           7        31       2013        0\n"]}]},{"cell_type":"markdown","source":["3. Drop the column 'City' because there are only few cities duplicate, and I believe that it won't be a effective data"],"metadata":{"id":"1F3U_0lR4IXX"}},{"cell_type":"code","source":["trainData = trainData.drop('City', axis=1)\n","testData = testData.drop('City', axis=1)"],"metadata":{"id":"v3rvB_2dSFhX","executionInfo":{"status":"ok","timestamp":1700776775285,"user_tz":420,"elapsed":3,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":92,"outputs":[]},{"cell_type":"markdown","source":["4. Get dummies for columns 'City Group' and 'Type'"],"metadata":{"id":"qrOt5ueq4hcC"}},{"cell_type":"code","source":["trainData = pd.get_dummies(trainData, columns=['City Group', 'Type'])\n","trainData.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"QOQElk_yRZuB","executionInfo":{"status":"ok","timestamp":1700776775285,"user_tz":420,"elapsed":3,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"6615c93e-20d1-42ee-87d2-fc6201ffd5a9"},"execution_count":93,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32  P33  P34  P35  P36  P37    revenue  Open Month  Open Day  Open Year  City Group_Big Cities  City Group_Other  Type_DT  Type_FC  Type_IL\n","0   0   4  5.0  4.0  4.0   2   2   5   4   5    5    3    5  5.0    1    2    2    2    4    5    4    1    3    3    1    1  1.0  4.0  2.0  3.0    5    3    4    5    5    4    3    4  5653753.0           7        17       1999                      1                 0        0        0        1\n","1   1   4  5.0  4.0  4.0   1   2   5   5   5    5    1    5  5.0    0    0    0    0    0    3    2    1    3    2    0    0  0.0  0.0  3.0  3.0    0    0    0    0    0    0    0    0  6923131.0           2        14       2008                      1                 0        0        1        0\n","2   2   2  4.0  2.0  5.0   2   3   5   5   5    5    2    5  5.0    0    0    0    0    0    1    1    1    1    1    0    0  0.0  0.0  1.0  3.0    0    0    0    0    0    0    0    0  2055379.0           3         9       2013                      0                 1        0        0        1\n","3   3   6  4.5  6.0  6.0   4   4  10   8  10   10    8   10  7.5    6    4    9    3   12   20   12    6    1   10    2    2  2.5  2.5  2.5  7.5   25   12   10    6   18   12   12    6  2675511.0           2         2       2012                      0                 1        0        0        1\n","4   4   3  4.0  3.0  4.0   2   2   5   5   5    5    2    5  5.0    2    1    2    1    4    2    2    1    2    1    2    3  3.0  5.0  1.0  3.0    5    1    3    2    3    4    3    3  4316715.0           5         9       2009                      0                 1        0        0        1"],"text/html":["\n","  <div id=\"df-f11b354f-c48a-400b-8602-c2efe691b081\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>P1</th>\n","      <th>P2</th>\n","      <th>P3</th>\n","      <th>P4</th>\n","      <th>P5</th>\n","      <th>P6</th>\n","      <th>P7</th>\n","      <th>P8</th>\n","      <th>P9</th>\n","      <th>P10</th>\n","      <th>P11</th>\n","      <th>P12</th>\n","      <th>P13</th>\n","      <th>P14</th>\n","      <th>P15</th>\n","      <th>P16</th>\n","      <th>P17</th>\n","      <th>P18</th>\n","      <th>P19</th>\n","      <th>P20</th>\n","      <th>P21</th>\n","      <th>P22</th>\n","      <th>P23</th>\n","      <th>P24</th>\n","      <th>P25</th>\n","      <th>P26</th>\n","      <th>P27</th>\n","      <th>P28</th>\n","      <th>P29</th>\n","      <th>P30</th>\n","      <th>P31</th>\n","      <th>P32</th>\n","      <th>P33</th>\n","      <th>P34</th>\n","      <th>P35</th>\n","      <th>P36</th>\n","      <th>P37</th>\n","      <th>revenue</th>\n","      <th>Open Month</th>\n","      <th>Open Day</th>\n","      <th>Open Year</th>\n","      <th>City Group_Big Cities</th>\n","      <th>City Group_Other</th>\n","      <th>Type_DT</th>\n","      <th>Type_FC</th>\n","      <th>Type_IL</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5653753.0</td>\n","      <td>7</td>\n","      <td>17</td>\n","      <td>1999</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6923131.0</td>\n","      <td>2</td>\n","      <td>14</td>\n","      <td>2008</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2055379.0</td>\n","      <td>3</td>\n","      <td>9</td>\n","      <td>2013</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>4.5</td>\n","      <td>6.0</td>\n","      <td>6.0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>7.5</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>3</td>\n","      <td>12</td>\n","      <td>20</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2.5</td>\n","      <td>2.5</td>\n","      <td>2.5</td>\n","      <td>7.5</td>\n","      <td>25</td>\n","      <td>12</td>\n","      <td>10</td>\n","      <td>6</td>\n","      <td>18</td>\n","      <td>12</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>2675511.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2012</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4316715.0</td>\n","      <td>5</td>\n","      <td>9</td>\n","      <td>2009</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f11b354f-c48a-400b-8602-c2efe691b081')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f11b354f-c48a-400b-8602-c2efe691b081 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f11b354f-c48a-400b-8602-c2efe691b081');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-66ffd84d-ffd8-41a4-afef-726f49c75a38\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-66ffd84d-ffd8-41a4-afef-726f49c75a38')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-66ffd84d-ffd8-41a4-afef-726f49c75a38 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["testData = pd.get_dummies(testData, columns=['City Group', 'Type'])\n","testData.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"6Wk_oNScReTN","executionInfo":{"status":"ok","timestamp":1700776775449,"user_tz":420,"elapsed":166,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"d93f6db6-ee10-4c01-d581-d9abf03978d6"},"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id  P1   P2   P3   P4  P5  P6  P7  P8  P9  P10  P11  P12  P13  P14  P15  P16  P17  P18  P19  P20  P21  P22  P23  P24  P25  P26  P27  P28  P29  P30  P31  P32  P33  P34  P35  P36  P37  Open Month  Open Day  Open Year  revenue  City Group_Big Cities  City Group_Other  Type_DT  Type_FC  Type_IL  Type_MB\n","0   0   1  4.0  4.0  4.0   1   2   5   4   5    5    5    3  4.0    0    0    0    2    0    5    5    3    1    4    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0           1        22       2011        0                      0                 1        0        1        0        0\n","1   1   3  4.0  4.0  4.0   2   2   5   3   4    4    2    4  5.0    0    0    0    0    0    5    5    3    2    1    0    0  0.0  0.0  1.0  3.0    0    0    0    0    0    0    0    0           3        18       2011        0                      0                 1        0        0        1        0\n","2   2   3  4.0  4.0  4.0   2   2   5   4   4    5    4    5  5.0    0    0    0    0    0    5    5    5    5    5    0    0  0.0  0.0  2.0  3.0    0    0    0    0    0    0    0    0          10        30       2013        0                      1                 0        0        1        0        0\n","3   3   2  4.0  4.0  4.0   2   3   5   4   5    4    3    4  5.0    0    0    0    0    4    4    4    3    2    2    0    0  0.0  0.0  2.0  3.0    0    4    0    0    0    0    0    0           5         6       2013        0                      0                 1        0        0        1        0\n","4   4   2  4.0  4.0  4.0   1   2   5   4   5    4    3    5  4.0    0    0    0    0    0    1    5    3    1    1    0    0  0.0  0.0  5.0  3.0    0    0    0    0    0    0    0    0           7        31       2013        0                      0                 1        0        1        0        0"],"text/html":["\n","  <div id=\"df-2ef942e0-f07b-432e-88bb-ef00a3f33b43\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>P1</th>\n","      <th>P2</th>\n","      <th>P3</th>\n","      <th>P4</th>\n","      <th>P5</th>\n","      <th>P6</th>\n","      <th>P7</th>\n","      <th>P8</th>\n","      <th>P9</th>\n","      <th>P10</th>\n","      <th>P11</th>\n","      <th>P12</th>\n","      <th>P13</th>\n","      <th>P14</th>\n","      <th>P15</th>\n","      <th>P16</th>\n","      <th>P17</th>\n","      <th>P18</th>\n","      <th>P19</th>\n","      <th>P20</th>\n","      <th>P21</th>\n","      <th>P22</th>\n","      <th>P23</th>\n","      <th>P24</th>\n","      <th>P25</th>\n","      <th>P26</th>\n","      <th>P27</th>\n","      <th>P28</th>\n","      <th>P29</th>\n","      <th>P30</th>\n","      <th>P31</th>\n","      <th>P32</th>\n","      <th>P33</th>\n","      <th>P34</th>\n","      <th>P35</th>\n","      <th>P36</th>\n","      <th>P37</th>\n","      <th>Open Month</th>\n","      <th>Open Day</th>\n","      <th>Open Year</th>\n","      <th>revenue</th>\n","      <th>City Group_Big Cities</th>\n","      <th>City Group_Other</th>\n","      <th>Type_DT</th>\n","      <th>Type_FC</th>\n","      <th>Type_IL</th>\n","      <th>Type_MB</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>2011</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>2011</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>30</td>\n","      <td>2013</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>2013</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>4.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>31</td>\n","      <td>2013</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ef942e0-f07b-432e-88bb-ef00a3f33b43')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2ef942e0-f07b-432e-88bb-ef00a3f33b43 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2ef942e0-f07b-432e-88bb-ef00a3f33b43');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-47054eaa-6bce-4bdf-8619-dd62866bc461\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47054eaa-6bce-4bdf-8619-dd62866bc461')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-47054eaa-6bce-4bdf-8619-dd62866bc461 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":94}]},{"cell_type":"markdown","source":["5. Drop the column that only shows in testData"],"metadata":{"id":"QnyvYIfR4wo4"}},{"cell_type":"code","source":["testData = testData.drop('Type_MB', axis=1)"],"metadata":{"id":"ytL28QDBSe4u","executionInfo":{"status":"ok","timestamp":1700776775449,"user_tz":420,"elapsed":2,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":95,"outputs":[]},{"cell_type":"markdown","source":["6. Make sure trainData and testData have same columns"],"metadata":{"id":"9-82OS6x43IK"}},{"cell_type":"code","source":["print(trainData.shape)\n","print(testData.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hxT2QkySRv5B","executionInfo":{"status":"ok","timestamp":1700776775449,"user_tz":420,"elapsed":2,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"7b32446d-d2b1-41d7-c0ea-377b4192ce54"},"execution_count":96,"outputs":[{"output_type":"stream","name":"stdout","text":["(137, 47)\n","(100000, 47)\n"]}]},{"cell_type":"markdown","source":["### Correlation"],"metadata":{"id":"3t3iHrv56oUX"}},{"cell_type":"code","source":["target_column = 'revenue'\n","\n","# Calculate the correlation matrix\n","correlation_matrix = trainData.corr()\n","\n","# Extract correlation values for the target column\n","correlation_with_target = correlation_matrix[target_column]\n","\n","# Sort correlation values in descending order to identify strongest relationships\n","sorted_correlation = correlation_with_target.abs().sort_values(ascending=False)\n","\n","# Display the sorted correlation values\n","print(sorted_correlation)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"99TfPzqT6qmf","executionInfo":{"status":"ok","timestamp":1700776780517,"user_tz":420,"elapsed":149,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"60e1ec78-b429-43da-ab4f-8d50c4e0c6da"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["revenue                  1.000000\n","Open Year                0.326140\n","City Group_Other         0.237403\n","City Group_Big Cities    0.237403\n","P2                       0.191518\n","P28                      0.155534\n","P6                       0.139094\n","P29                      0.114846\n","P13                      0.105085\n","Type_FC                  0.100211\n","P21                      0.097411\n","Type_IL                  0.096696\n","P11                      0.084247\n","P8                       0.084215\n","P22                      0.083562\n","P10                      0.073220\n","P34                      0.072343\n","P1                       0.070217\n","P17                      0.067137\n","P30                      0.066203\n","P32                      0.065857\n","P12                      0.062193\n","P7                       0.051165\n","P36                      0.050534\n","P9                       0.050352\n","P35                      0.050156\n","P23                      0.045507\n","P31                      0.040418\n","P16                      0.037997\n","P25                      0.036365\n","P4                       0.035685\n","P18                      0.034537\n","P33                      0.032426\n","P5                       0.028191\n","P19                      0.027984\n","P3                       0.024613\n","Type_DT                  0.021500\n","P37                      0.019051\n","P24                      0.014222\n","P20                      0.014147\n","P27                      0.013680\n","P26                      0.007650\n","P14                      0.006441\n","Id                       0.006277\n","Open Day                 0.003555\n","Open Month               0.003335\n","P15                      0.000742\n","Name: revenue, dtype: float64\n"]}]},{"cell_type":"code","source":["# mean and median\n","mean_corr = sorted_correlation.mean()\n","median_corr = sorted_correlation.median()\n","\n","# Top 25% & 75% percentile\n","q25_corr = sorted_correlation.quantile(0.25)\n","q75_corr = sorted_correlation.quantile(0.75)\n","\n","print(\"Mean:\", mean_corr)\n","print(\"Median:\", median_corr)\n","print(\"Top 25% percentile:\", q25_corr)\n","print(\"Top 75% percentile:\", q75_corr)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SRzxs2GY7I8O","executionInfo":{"status":"ok","timestamp":1700776783382,"user_tz":420,"elapsed":167,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"ab23b536-1de9-4f50-cba3-a41e810afcac"},"execution_count":98,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 0.08908648032931436\n","Median: 0.05053382303092079\n","Top 25% percentile: 0.026298920137907994\n","Top 75% percentile: 0.09047122399625743\n"]}]},{"cell_type":"markdown","source":["OptA. Filter and drop columns with correlation coefficients smaller than the 25th percentile"],"metadata":{"id":"TN-yT8Ei5E4r"}},{"cell_type":"code","source":["# Assuming 'Id' is the column you want to keep\n","columns_to_keep = ['Id','revenue']\n","\n","# Filter and drop columns with correlation coefficients smaller than the 50th percentile\n","columns_to_drop = sorted_correlation[sorted_correlation <= q25_corr].index\n","columns_to_keep.extend(columns_to_drop)\n","\n","trainData = trainData[columns_to_keep]\n","testData = testData[columns_to_keep]\n","\n","# Display the first few rows of the updated DataFrames\n","print(trainData.head())\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_-pHU7UKTU_6","executionInfo":{"status":"ok","timestamp":1700771219596,"user_tz":420,"elapsed":3,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"e0585eeb-2fc5-4046-ec04-75441de9ded1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id    revenue   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  5653753.0  4.0        0    4    1    4  4.0  1.0    1   0        17           7    2\n","1   1  6923131.0  4.0        0    0    0    2  0.0  0.0    0   1        14           2    0\n","2   2  2055379.0  2.0        0    0    0    1  0.0  0.0    0   2         9           3    0\n","3   3  2675511.0  6.0        0    6    2   12  2.5  2.5    6   3         2           2    4\n","4   4  4316715.0  3.0        0    3    2    2  5.0  3.0    2   4         9           5    1\n","   Id  revenue   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0        0  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1        0  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2        0  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3        0  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4        0  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"markdown","source":["OptB. Filter and drop columns with correlation coefficients smaller than the median correlation"],"metadata":{"id":"FATniP_15UNT"}},{"cell_type":"code","source":["# Assuming 'Id' is the column you want to keep\n","columns_to_keep = ['Id','revenue']\n","\n","# Filter and drop columns with correlation coefficients smaller than the 50th percentile\n","columns_to_drop = sorted_correlation[sorted_correlation <= median_corr].index\n","columns_to_keep.extend(columns_to_drop)\n","\n","trainData = trainData[columns_to_keep]\n","testData = testData[columns_to_keep]\n","\n","# Display the first few rows of the updated DataFrames\n","print(trainData.head())\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700776786392,"user_tz":420,"elapsed":376,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"f58d45dc-444d-48bb-8569-5716c1fffae3","id":"UjqLljl95UNU"},"execution_count":99,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id    revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  5653753.0    3   5    4    3    3    2    1  4.0    4    5   2    5  4.0        0    4    1    4  4.0  1.0    1   0        17           7    2\n","1   1  6923131.0    0   5    0    2    0    0    0  4.0    0    0   1    3  4.0        0    0    0    2  0.0  0.0    0   1        14           2    0\n","2   2  2055379.0    0   5    0    1    0    0    0  5.0    0    0   2    1  2.0        0    0    0    1  0.0  0.0    0   2         9           3    0\n","3   3  2675511.0   12  10   12   10   12    9    2  6.0   12    6   4   20  6.0        0    6    2   12  2.5  2.5    6   3         2           2    4\n","4   4  4316715.0    3   5    4    1    1    2    3  4.0    4    2   2    2  3.0        0    3    2    2  5.0  3.0    2   4         9           5    1\n","   Id  revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0        0    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1        0    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2        0    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3        0    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4        0    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"markdown","source":["##Modeling"],"metadata":{"id":"XXoaDG9U2xes"}},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV, train_test_split\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.metrics import mean_squared_error\n","\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.ensemble import GradientBoostingClassifier\n"],"metadata":{"id":"bQ5JXpua6Ssw","executionInfo":{"status":"ok","timestamp":1700776789367,"user_tz":420,"elapsed":167,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":100,"outputs":[]},{"cell_type":"code","source":["#Extract training and test data\n","y_train = trainData[\"revenue\"]\n","X_train = trainData.drop([\"revenue\"], axis=1) #extracting training data without the target column\n","y_test = testData[\"revenue\"]\n","X_test = testData.drop([\"revenue\"], axis=1) #extracting training data without the target column\n","\n","print(X_train.shape)\n","print(X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HAjbzCa2274f","executionInfo":{"status":"ok","timestamp":1700776790957,"user_tz":420,"elapsed":164,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"3b1874a6-1b28-425e-959b-8f1fdedcbec1"},"execution_count":101,"outputs":[{"output_type":"stream","name":"stdout","text":["(137, 25)\n","(100000, 25)\n"]}]},{"cell_type":"markdown","source":["###Decision Tree"],"metadata":{"id":"nJybM0ptP-7f"}},{"cell_type":"code","source":["#Decision Tree Regressor ========================================================================\n","#CONSTRUCT DEFAULT DECISION TREE AND OBTAIN RESPECTIVE ACCURACY\n","clf = DecisionTreeRegressor()\n","clf.fit(X_train, y_train)\n","clf_predict_Train=clf.predict(X_train)\n","\n","#clf.feature_importances_\n","mean_squared_error(y_train,clf_predict_Train)\n","print(\"RMSE (training) for Decision Tree:{0:10f}\".format(mean_squared_error(y_train,clf_predict_Train)))\n","clf_predict_Test=clf.predict(X_test)\n","mean_squared_error(y_test,clf_predict_Test)\n","print(\"RMSE (Test Data) for Decision Tree:{0:10f}\".format(mean_squared_error(y_test,clf_predict_Test)))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oX_erxO1QobQ","executionInfo":{"status":"ok","timestamp":1700776792675,"user_tz":420,"elapsed":156,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"7b987e90-674f-43d3-9901-8ad991348ba9"},"execution_count":102,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Decision Tree:  0.000000\n","RMSE (Test Data) for Decision Tree:43599365803248.289062\n"]}]},{"cell_type":"markdown","source":["Random Search"],"metadata":{"id":"xIDjmdXABkK6"}},{"cell_type":"code","source":["# Random Search for Hyperparameter Tuning ========================================================\n","# Define the hyperparameter grid\n","param_dist = {\n","    'max_depth': [None, 10, 20, 30, 40, 50],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 2, 4],\n","    'max_features': ['auto', 'sqrt', 'log2', None]\n","}\n","\n","# Create the random search model\n","random_search = RandomizedSearchCV(\n","    DecisionTreeRegressor(),\n","    param_distributions=param_dist,\n","    n_iter=10,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1,\n","    random_state=42\n",")\n","\n","# Fit the random search model\n","random_search.fit(X_train, y_train)\n","\n","# Get the best parameters from random search\n","best_params_random = random_search.best_params_\n","print(\"Best Hyperparameters from Random Search:\", best_params_random)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ePifDOc509j","executionInfo":{"status":"ok","timestamp":1700776794908,"user_tz":420,"elapsed":428,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"4c68fc0d-5e7b-4ef0-ea98-2b4be5b7a137"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","Best Hyperparameters from Random Search: {'min_samples_split': 5, 'min_samples_leaf': 4, 'max_features': 'log2', 'max_depth': 50}\n"]}]},{"cell_type":"code","source":["clfRS = DecisionTreeRegressor(\n","    min_samples_split=5, min_samples_leaf=4, max_features='log2', max_depth=50\n",")\n","clfRS.fit(X_train, y_train)\n","clfRS_predict_Train = clfRS.predict(X_train)\n","\n","# clf.feature_importances_\n","mean_squared_error_train = mean_squared_error(y_train, clfRS_predict_Train)\n","print(\"RMSE (training) for Decision Tree: {0:10f}\".format(mean_squared_error_train))\n","\n","clfRS_predict_Test = clfRS.predict(X_test)\n","mean_squared_error_test = mean_squared_error(y_test, clfRS_predict_Test)\n","print(\"RMSE (Test Data) for Decision Tree: {0:10f}\".format(mean_squared_error_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"55mwEdy54BY4","executionInfo":{"status":"ok","timestamp":1700776808008,"user_tz":420,"elapsed":145,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"5bf39834-62cf-438e-f6e2-36fac108d955"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Decision Tree: 4673746141346.010742\n","RMSE (Test Data) for Decision Tree: 38856962655639.460938\n"]}]},{"cell_type":"code","source":["X_test_data = testData.drop('revenue', axis=1)\n","\n","# Use the trained Decision Tree model to predict revenue on the test data\n","predictions_test_data = clf.predict(X_test_data)\n","\n","# Display the predicted revenue for the test data\n","print(predictions_test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bIZ_7rIv4GMS","executionInfo":{"status":"ok","timestamp":1700776810596,"user_tz":420,"elapsed":185,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"349d2402-e2d8-4a6f-a1bc-06f5c3ac4eb5"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["[19696939.  6923131.  1904842. ...  2018785.  9262754.  9262754.]\n"]}]},{"cell_type":"code","source":["# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = predictions_test_data\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fkJHSJ9L4GnD","executionInfo":{"status":"ok","timestamp":1700776814707,"user_tz":420,"elapsed":153,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"f1eaac98-a7d1-4173-9810-6d5133a8904b"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id     revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  19696939.0    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1   6923131.0    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2   1904842.0    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3   5161370.0    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4   5595267.0    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["DTRS = testData[['Id', 'revenue']].copy()\n","\n","# Rename the 'revenue' column to 'Prediction'\n","DTRS = DTRS.rename(columns={'revenue': 'Prediction'})\n","\n","# Display the updated DataFrame 'DT'\n","print(DTRS)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4TOmCmcg4lxl","executionInfo":{"status":"ok","timestamp":1700776823001,"user_tz":420,"elapsed":3497,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"0edbe0e3-4b6d-4830-8d14-21860287cbc7"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["DTRS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/DecisionTree_RS_25th.csv', index=False)\n","DTRS.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5pydFdul4vEX","executionInfo":{"status":"ok","timestamp":1700771633334,"user_tz":420,"elapsed":985,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"8fedbae0-478e-477f-9c53-3ed17ea400d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100000, 3)"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["DTRS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/DecisionTree_RS_Med.csv', index=False)"],"metadata":{"id":"19v0x08EE_TD","executionInfo":{"status":"ok","timestamp":1700776824554,"user_tz":420,"elapsed":661,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":108,"outputs":[]},{"cell_type":"markdown","source":["Grid Search"],"metadata":{"id":"zhy30_Ia4G24"}},{"cell_type":"code","source":["# Grid Search for Hyperparameter Tuning ==========================================================\n","# Define the hyperparameter grid\n","param_grid = {\n","    'max_depth': [None, 10, 20, 30, 40, 50],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 2, 4],\n","    'max_features': ['auto', 'sqrt', 'log2', None]\n","}\n","\n","# Create the grid search model\n","grid_search = GridSearchCV(\n","    DecisionTreeRegressor(),\n","    param_grid=param_grid,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1\n",")\n","\n","# Fit the grid search model\n","grid_search.fit(X_train, y_train)\n","\n","# Get the best parameters from grid search\n","best_params_grid = grid_search.best_params_\n","print(\"Best Hyperparameters from Grid Search:\", best_params_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eBq8SIGc3MlS","executionInfo":{"status":"ok","timestamp":1700776834908,"user_tz":420,"elapsed":7301,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"327acd9c-f5c5-4db7-eb6b-baaa7f81f2cb"},"execution_count":109,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 216 candidates, totalling 1080 fits\n","Best Hyperparameters from Grid Search: {'max_depth': 30, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10}\n"]}]},{"cell_type":"code","source":["clfGS = DecisionTreeRegressor(\n","    min_samples_split=10, min_samples_leaf=4, max_features='log2', max_depth=30\n",")\n","clfGS.fit(X_train, y_train)\n","clfGS_predict_Train = clfGS.predict(X_train)\n","\n","# clf.feature_importances_\n","mean_squared_error_train = mean_squared_error(y_train, clfGS_predict_Train)\n","print(\"RMSE (training) for Decision Tree: {0:10f}\".format(mean_squared_error_train))\n","\n","clfGS_predict_Test = clfGS.predict(X_test)\n","mean_squared_error_test = mean_squared_error(y_test, clfGS_predict_Test)\n","print(\"RMSE (Test Data) for Decision Tree: {0:10f}\".format(mean_squared_error_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkK6Xb5R5AIV","executionInfo":{"status":"ok","timestamp":1700776848553,"user_tz":420,"elapsed":162,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"88516625-2954-4073-f856-179d5ff839fe"},"execution_count":110,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Decision Tree: 4377997526024.147949\n","RMSE (Test Data) for Decision Tree: 38857847191808.750000\n"]}]},{"cell_type":"code","source":["X_test_data = testData.drop('revenue', axis=1)\n","\n","# Use the trained Decision Tree model to predict revenue on the test data\n","predictions_test_data = clf.predict(X_test_data)\n","\n","# Display the predicted revenue for the test data\n","print(predictions_test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ow5J1Pl5T8k4","executionInfo":{"status":"ok","timestamp":1700776852001,"user_tz":420,"elapsed":174,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"4686fde5-429e-42b1-c872-d4b2df2dac9b"},"execution_count":111,"outputs":[{"output_type":"stream","name":"stdout","text":["[19696939.  6923131.  1904842. ...  2018785.  9262754.  9262754.]\n"]}]},{"cell_type":"code","source":["# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = predictions_test_data\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jSHjpeq7UZor","executionInfo":{"status":"ok","timestamp":1700776854209,"user_tz":420,"elapsed":157,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"e6211027-fb54-40e2-b7ca-97a2e8c97497"},"execution_count":112,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id     revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  19696939.0    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1   6923131.0    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2   1904842.0    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3   5161370.0    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4   5595267.0    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["DTGS = testData[['Id', 'revenue']].copy()\n","\n","# Rename the 'revenue' column to 'Prediction'\n","DTGS = DTGS.rename(columns={'revenue': 'Prediction'})\n","\n","# Display the updated DataFrame 'DT'\n","print(DTGS)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DdqqkfASglMW","executionInfo":{"status":"ok","timestamp":1700776866360,"user_tz":420,"elapsed":5685,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"1e6fd4b8-51d9-4d1a-e24a-abbfe9e71648"},"execution_count":113,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["DTGS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/DecisionTree_GS_25th.csv', index=False)\n","DTGS.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S3GGOUAQXxlw","executionInfo":{"status":"ok","timestamp":1700771805518,"user_tz":420,"elapsed":494,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"66c750d7-a049-4092-c19c-01e843f09b04"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100000, 3)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["DTGS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/DecisionTree_GS_Med.csv', index=False)"],"metadata":{"id":"-TCjm6d1FGRS","executionInfo":{"status":"ok","timestamp":1700776866990,"user_tz":420,"elapsed":632,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":114,"outputs":[]},{"cell_type":"markdown","source":["### Random Forest"],"metadata":{"id":"ZWCkzphtX7pI"}},{"cell_type":"code","source":["#Random Forest Regressor==============================================================================\n","#=================================================================================================\n","\n","rfc = RandomForestRegressor(n_estimators=100, random_state=42)  # You can change n_estimators and other parameters\n","\n","# Train the model\n","rfc.fit(X_train, y_train)\n","\n","# Predict on the training set\n","rfc_predict_Train = rfc.predict(X_train)\n","\n","# Calculate RMSE for the training set\n","train_rmse = mean_squared_error(y_train, rfc_predict_Train)\n","print(\"RMSE (training) for Random Forest: {:.10f}\".format(train_rmse))\n","\n","# Predict on the test set\n","rfc_predict_Test = rfc.predict(X_test)\n","\n","# Calculate RMSE for the test set\n","test_rmse = mean_squared_error(y_test, rfc_predict_Test)\n","print(\"RMSE (Test Data) for Random Forest: {:.10f}\".format(test_rmse))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CEykuSJbYC6p","executionInfo":{"status":"ok","timestamp":1700776869709,"user_tz":420,"elapsed":1079,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"67d07711-d87a-4ead-ecf1-26b8cee31be4"},"execution_count":115,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Random Forest: 1152013862786.6318359375\n","RMSE (Test Data) for Random Forest: 33536137897793.9609375000\n"]}]},{"cell_type":"markdown","source":["Random Search"],"metadata":{"id":"oM9cP23f54sh"}},{"cell_type":"code","source":["# Random Search for Hyperparameter Tuning ========================================================\n","# Define the hyperparameter grid\n","param_dist = {\n","    'n_estimators': [50, 100, 150, 200],\n","    'max_depth': [None, 10, 20, 30, 40, 50],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 2, 4],\n","    'max_features': ['auto', 'sqrt', 'log2']\n","}\n","\n","# Create the random search model\n","random_search = RandomizedSearchCV(\n","    RandomForestRegressor(random_state=42),\n","    param_distributions=param_dist,\n","    n_iter=10,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1,\n","    random_state=42\n",")\n","\n","# Fit the random search model\n","random_search.fit(X_train, y_train)\n","\n","# Get the best parameters from random search\n","best_params_random = random_search.best_params_\n","print(\"Best Hyperparameters from Random Search:\", best_params_random)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fB8WeYEn566i","executionInfo":{"status":"ok","timestamp":1700776888879,"user_tz":420,"elapsed":14813,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"46af53a6-085e-44f9-a41c-a026dd3a4496"},"execution_count":116,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","Best Hyperparameters from Random Search: {'n_estimators': 100, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'log2', 'max_depth': 10}\n"]}]},{"cell_type":"code","source":["# Using the best hyperparameters from Random Search\n","best_params_random = {'n_estimators': 100, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'log2', 'max_depth': 10}\n","\n","# Construct Random Forest with best hyperparameters\n","rfc_tuned = RandomForestRegressor(**best_params_random, random_state=42)\n","\n","# Train the model\n","rfc_tuned.fit(X_train, y_train)\n","\n","# Predict on the training set\n","rfc_predict_Train_tuned = rfc_tuned.predict(X_train)\n","\n","# Calculate RMSE for the training set with tuned model\n","train_rmse_tuned = mean_squared_error(y_train, rfc_predict_Train_tuned)\n","print(\"RMSE (training) for Random Forest (Tuned): {:.10f}\".format(train_rmse_tuned))\n","\n","# Predict on the test set with tuned model\n","rfc_predict_Test_tuned = rfc_tuned.predict(X_test)\n","\n","# Calculate RMSE for the test set with tuned model\n","test_rmse_tuned = mean_squared_error(y_test, rfc_predict_Test_tuned)\n","print(\"RMSE (Test Data) for Random Forest (Tuned): {:.10f}\".format(test_rmse_tuned))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VgfKKf7K6DLk","executionInfo":{"status":"ok","timestamp":1700776908822,"user_tz":420,"elapsed":1221,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"85a00ea6-a8a4-4d24-eccf-326207e2e243"},"execution_count":117,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Random Forest (Tuned): 1276384000170.6025390625\n","RMSE (Test Data) for Random Forest (Tuned): 30533766056600.1875000000\n"]}]},{"cell_type":"code","source":["df_rfc_RS =pd.DataFrame()\n","df_rfc_RS['revenue']=rfc_predict_Test_tuned\n","print(rfc_predict_Test_tuned)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700776911411,"user_tz":420,"elapsed":150,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"746edd25-71c1-4e72-eb13-74c8e881b3aa","id":"talZ7Ynj6oY-"},"execution_count":118,"outputs":[{"output_type":"stream","name":"stdout","text":["[7485837.2760155  5335141.42057106 5354913.342      ... 6493690.739\n"," 5352720.91297505 5687033.2721906 ]\n"]}]},{"cell_type":"code","source":["# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = rfc_predict_Test_tuned\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700776913321,"user_tz":420,"elapsed":164,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"b761b86e-be4e-415f-9a53-d0b35f4efced","id":"izZuPpTb6oZH"},"execution_count":119,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id       revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  7.485837e+06    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1  5.335141e+06    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2  5.354913e+06    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3  5.587041e+06    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4  5.919094e+06    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["RF_RS = testData[['Id', 'revenue']].copy()\n","RF_RS = RF_RS.rename(columns={'revenue': 'Prediction'})\n","\n","print(RF_RS)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700776919435,"user_tz":420,"elapsed":4504,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"edc54cdf-b0a2-4350-a495-2c5e383ee0a1","id":"m5ZfsqEC6oZH"},"execution_count":120,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["RF_RS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/RandomForest_RS_25th.csv', index=False)"],"metadata":{"id":"5eKzgX2D6oZH","executionInfo":{"status":"ok","timestamp":1700772342144,"user_tz":420,"elapsed":1719,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["RF_RS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/RandomForest_RS_Med.csv', index=False)"],"metadata":{"id":"4kZ447sBFny0","executionInfo":{"status":"ok","timestamp":1700776920129,"user_tz":420,"elapsed":698,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":121,"outputs":[]},{"cell_type":"markdown","source":["Grid Search"],"metadata":{"id":"AH7wTu1P5-NN"}},{"cell_type":"code","source":["# Grid Search for Hyperparameter Tuning ==========================================================\n","# Define the hyperparameter grid\n","param_grid = {\n","    'n_estimators': [50, 100, 150, 200],\n","    'max_depth': [None, 10, 20, 30, 40, 50],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 2, 4],\n","    'max_features': ['auto', 'sqrt', 'log2']\n","}\n","\n","# Create the grid search model\n","grid_search = GridSearchCV(\n","    RandomForestRegressor(random_state=42),\n","    param_grid=param_grid,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1\n",")\n","\n","# Fit the grid search model\n","grid_search.fit(X_train, y_train)\n","\n","# Get the best parameters from grid search\n","best_params_grid = grid_search.best_params_\n","print(\"Best Hyperparameters from Grid Search:\", best_params_grid)"],"metadata":{"id":"IE1VTw_d5_2m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700777540364,"user_tz":420,"elapsed":620237,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"688a6865-ab30-447c-a085-a79148a94960"},"execution_count":122,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 648 candidates, totalling 3240 fits\n","Best Hyperparameters from Grid Search: {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}\n"]}]},{"cell_type":"code","source":["# Using the best hyperparameters from Random Search\n","best_params_random = {'n_estimators': 50, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_features': 'log2', 'max_depth': None}\n","\n","# Construct Random Forest with best hyperparameters\n","rfc_tuned = RandomForestRegressor(**best_params_random, random_state=42)\n","\n","# Train the model\n","rfc_tuned.fit(X_train, y_train)\n","\n","# Predict on the training set\n","rfc_predict_Train_tuned = rfc_tuned.predict(X_train)\n","\n","# Calculate RMSE for the training set with tuned model\n","train_rmse_tuned = mean_squared_error(y_train, rfc_predict_Train_tuned)\n","print(\"RMSE (training) for Random Forest (Tuned): {:.10f}\".format(train_rmse_tuned))\n","\n","# Predict on the test set with tuned model\n","rfc_predict_Test_tuned = rfc_tuned.predict(X_test)\n","\n","# Calculate RMSE for the test set with tuned model\n","test_rmse_tuned = mean_squared_error(y_test, rfc_predict_Test_tuned)\n","print(\"RMSE (Test Data) for Random Forest (Tuned): {:.10f}\".format(test_rmse_tuned))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"na58NeJ27x9n","executionInfo":{"status":"ok","timestamp":1700777686733,"user_tz":420,"elapsed":754,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"7468e839-e72b-42b3-c29d-5b094c2d14a4"},"execution_count":129,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Random Forest (Tuned): 2881789132878.9335937500\n","RMSE (Test Data) for Random Forest (Tuned): 30403667064544.0156250000\n"]}]},{"cell_type":"code","source":["df_rfc =pd.DataFrame()\n","df_rfc['revenue']=rfc_predict_Test_tuned\n","print(rfc_predict_Test_tuned)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ugA_F2gDYhbe","executionInfo":{"status":"ok","timestamp":1700777688332,"user_tz":420,"elapsed":154,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"f081c0e6-f16c-4ebf-deb9-f8f81d4f6160"},"execution_count":130,"outputs":[{"output_type":"stream","name":"stdout","text":["[5355482.85805726 5324377.307      5920288.35734524 ... 5830878.09767532\n"," 5337879.16511162 6459884.67153247]\n"]}]},{"cell_type":"code","source":["# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = rfc_predict_Test_tuned\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nv41NVMwYsMz","executionInfo":{"status":"ok","timestamp":1700777690233,"user_tz":420,"elapsed":2,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"37433ee2-b41a-41ec-e246-ef25c1e5eb25"},"execution_count":131,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id       revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  5.355483e+06    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1  5.324377e+06    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2  5.920288e+06    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3  4.719684e+06    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4  5.717671e+06    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["RF_GS = testData[['Id', 'revenue']].copy()\n","RF_GS = RF_GS.rename(columns={'revenue': 'Prediction'})\n","\n","print(RF_GS)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j6i6kVW8Yvye","executionInfo":{"status":"ok","timestamp":1700777695893,"user_tz":420,"elapsed":2545,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"dd69ef6e-eaff-4412-9870-6c53322e1d2a"},"execution_count":132,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["RF_GS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/RandomForest_GS_25th.csv', index=False)"],"metadata":{"id":"kLkHrqQaZCMC","executionInfo":{"status":"ok","timestamp":1700773330246,"user_tz":420,"elapsed":247,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["RF_GS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/RandomForest_GS_Med.csv', index=False)"],"metadata":{"id":"M8zaFSsHFsea","executionInfo":{"status":"ok","timestamp":1700777696093,"user_tz":420,"elapsed":204,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":133,"outputs":[]},{"cell_type":"markdown","source":["###Gradient Boosting"],"metadata":{"id":"5XeNr7l3ZJ16"}},{"cell_type":"code","source":["# Gradient Boosting Regressor\n","abc = GradientBoostingRegressor()\n","abc.fit(X_train, y_train)\n","\n","# Predict on the training set\n","abc_predict_Train = abc.predict(X_train)\n","\n","# Calculate RMSE for the training set\n","train_rmse = mean_squared_error(y_train, abc_predict_Train)\n","print(\"RMSE (training) for Gradient Boosting Regressor: {:.10f}\".format(train_rmse))\n","\n","# Predict on the test set\n","abc_predict_Test = abc.predict(X_test)\n","\n","# Calculate RMSE for the test set\n","test_rmse = mean_squared_error(y_test, abc_predict_Test)\n","print(\"RMSE (Test Data) for Gradient Boosting Regressor: {:.10f}\".format(test_rmse))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jk4ETyuyZOSR","executionInfo":{"status":"ok","timestamp":1700777699040,"user_tz":420,"elapsed":374,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"1c768820-f1d9-4e36-d660-0006dd269a2c"},"execution_count":134,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Gradient Boosting Regressor: 541211113311.0116577148\n","RMSE (Test Data) for Gradient Boosting Regressor: 36917537089152.3437500000\n"]}]},{"cell_type":"markdown","source":["Random Search"],"metadata":{"id":"RtvqbRvn9h8h"}},{"cell_type":"code","source":["# Random Search for Hyperparameter Tuning ========================================================\n","# Define the hyperparameter grid\n","param_dist = {\n","    'n_estimators': [50, 100, 150, 200],\n","    'learning_rate': [0.01, 0.1, 0.2, 0.3],\n","    'max_depth': [3, 4, 5, 6],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 2, 4]\n","}\n","\n","# Create the random search model\n","random_search = RandomizedSearchCV(\n","    GradientBoostingRegressor(),\n","    param_distributions=param_dist,\n","    n_iter=10,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1,\n","    random_state=42\n",")\n","\n","# Fit the random search model\n","random_search.fit(X_train, y_train)\n","\n","# Get the best parameters from random search\n","best_params_random = random_search.best_params_\n","print(\"Best Hyperparameters from Random Search:\", best_params_random)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hyu2rM5H9hPR","executionInfo":{"status":"ok","timestamp":1700777708396,"user_tz":420,"elapsed":6890,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"65911b1b-9db2-4f54-b9e1-5296b1dc285f"},"execution_count":135,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","Best Hyperparameters from Random Search: {'n_estimators': 150, 'min_samples_split': 10, 'min_samples_leaf': 1, 'max_depth': 5, 'learning_rate': 0.01}\n"]}]},{"cell_type":"code","source":["# Using the best hyperparameters from Random Search\n","best_params_random = {'n_estimators': 150, 'min_samples_split': 10, 'min_samples_leaf': 1, 'max_depth': 5, 'learning_rate': 0.01}\n","\n","# Construct Gradient Boosting Regressor with best hyperparameters\n","abc_tuned_random = GradientBoostingRegressor(**best_params_random)\n","\n","# Train the model\n","abc_tuned_random.fit(X_train, y_train)\n","\n","# Predict on the training set\n","abc_predict_Train_tuned_random = abc_tuned_random.predict(X_train)\n","\n","# Calculate RMSE for the training set with tuned model\n","train_rmse_tuned_random = mean_squared_error(y_train, abc_predict_Train_tuned_random)\n","print(\"RMSE (training) for Gradient Boosting Regressor (Tuned - Random Search): {:.10f}\".format(train_rmse_tuned_random))\n","\n","# Predict on the test set with tuned model\n","abc_predict_Test_tuned_random = abc_tuned_random.predict(X_test)\n","\n","# Calculate RMSE for the test set with tuned model\n","test_rmse_tuned_random = mean_squared_error(y_test, abc_predict_Test_tuned_random)\n","print(\"RMSE (Test Data) for Gradient Boosting Regressor (Tuned - Random Search): {:.10f}\".format(test_rmse_tuned_random))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gBidR09w9rAA","executionInfo":{"status":"ok","timestamp":1700777726853,"user_tz":420,"elapsed":1638,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"28f44814-5812-4bbe-8e46-5ed8296456e1"},"execution_count":136,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Gradient Boosting Regressor (Tuned - Random Search): 2167125483004.3376464844\n","RMSE (Test Data) for Gradient Boosting Regressor (Tuned - Random Search): 30036276476721.2890625000\n"]}]},{"cell_type":"code","source":["df_abc=pd.DataFrame()\n","df_abc['revenue']=abc_predict_Test_tuned_random\n","print(abc_predict_Test_tuned_random)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PF7hSMcuZc3u","executionInfo":{"status":"ok","timestamp":1700777728294,"user_tz":420,"elapsed":198,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"00c4f68e-a997-4219-db2f-e16fcd78032f"},"execution_count":137,"outputs":[{"output_type":"stream","name":"stdout","text":["[12890828.74597489  5526317.77301618  4911816.6104444  ...\n","  4481516.59672749  5753141.57598711  5104713.96056574]\n"]}]},{"cell_type":"code","source":["# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = abc_predict_Test_tuned_random\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ebgb-9xgZzXu","executionInfo":{"status":"ok","timestamp":1700777730708,"user_tz":420,"elapsed":188,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"e93c9824-32cf-487c-871d-91a622529c08"},"execution_count":138,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id       revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  1.289083e+07    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1  5.526318e+06    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2  4.911817e+06    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3  5.056160e+06    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4  4.944555e+06    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["GB = testData[['Id', 'revenue']].copy()\n","GB = GB.rename(columns={'revenue': 'Prediction'})\n","print(GB)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lNOg-GSQZ2fC","executionInfo":{"status":"ok","timestamp":1700777738406,"user_tz":420,"elapsed":3172,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"f45bbf88-7a66-444e-d868-67f97cd11dc7"},"execution_count":139,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["GB.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/GradientBoosting_RS_25th.csv', index=False)"],"metadata":{"id":"Xx-K2A-7Z4Dz","executionInfo":{"status":"ok","timestamp":1700773425346,"user_tz":420,"elapsed":1914,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["GB.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/GradientBoosting_RS_Med.csv', index=False)"],"metadata":{"id":"6dJDOwNLFwaG","executionInfo":{"status":"ok","timestamp":1700777740563,"user_tz":420,"elapsed":782,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":140,"outputs":[]},{"cell_type":"markdown","source":["Grid Search"],"metadata":{"id":"y5KqGSFZ9u7Y"}},{"cell_type":"code","source":["# Grid Search for Hyperparameter Tuning ==========================================================\n","# Define the hyperparameter grid\n","param_grid = {\n","    'n_estimators': [50, 100, 150, 200],\n","    'learning_rate': [0.01, 0.1, 0.2, 0.3],\n","    'max_depth': [3, 4, 5, 6],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 2, 4]\n","}\n","\n","# Create the grid search model\n","grid_search = GridSearchCV(\n","    GradientBoostingRegressor(),\n","    param_grid=param_grid,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1\n",")\n","\n","# Fit the grid search model\n","grid_search.fit(X_train, y_train)\n","\n","# Get the best parameters from grid search\n","best_params_grid = grid_search.best_params_\n","print(\"Best Hyperparameters from Grid Search:\", best_params_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o9lh27pK9uH0","executionInfo":{"status":"ok","timestamp":1700778025424,"user_tz":420,"elapsed":279211,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"e97986c0-0b4e-4900-e6d8-6ace8693e44c"},"execution_count":141,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 576 candidates, totalling 2880 fits\n","Best Hyperparameters from Grid Search: {'learning_rate': 0.01, 'max_depth': 5, 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 100}\n"]}]},{"cell_type":"code","source":["# Using the best hyperparameters from Random Search\n","best_params_random = {'n_estimators': 100, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_depth': 5, 'learning_rate': 0.01}\n","\n","# Construct Gradient Boosting Regressor with best hyperparameters\n","abc_tuned_random_GS = GradientBoostingRegressor(**best_params_random)\n","\n","# Train the model\n","abc_tuned_random_GS.fit(X_train, y_train)\n","\n","# Predict on the training set\n","abc_predict_Train_tuned_random_GS = abc_tuned_random_GS.predict(X_train)\n","\n","# Calculate RMSE for the training set with tuned model\n","train_rmse_tuned_random_GS = mean_squared_error(y_train, abc_predict_Train_tuned_random_GS)\n","print(\"RMSE (training) for Gradient Boosting Regressor (Tuned - Random Search): {:.10f}\".format(train_rmse_tuned_random_GS))\n","\n","# Predict on the test set with tuned model\n","abc_predict_Test_tuned_random_GS = abc_tuned_random_GS.predict(X_test)\n","\n","# Calculate RMSE for the test set with tuned model\n","test_rmse_tuned_random_GS = mean_squared_error(y_test, abc_predict_Test_tuned_random)\n","print(\"RMSE (Test Data) for Gradient Boosting Regressor (Tuned - Random Search): {:.10f}\".format(test_rmse_tuned_random_GS))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700778095782,"user_tz":420,"elapsed":605,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"86a71a51-f8b7-4cf3-c3e9-8ef9d7065188","id":"2sAPxV-C_1e7"},"execution_count":142,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Gradient Boosting Regressor (Tuned - Random Search): 3286198783904.0795898438\n","RMSE (Test Data) for Gradient Boosting Regressor (Tuned - Random Search): 30036276476721.2890625000\n"]}]},{"cell_type":"code","source":["df_abc=pd.DataFrame()\n","df_abc['revenue']=abc_predict_Test_tuned_random_GS\n","print(abc_predict_Test_tuned_random_GS)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700778098889,"user_tz":420,"elapsed":198,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"ef6f9d72-0e76-4ac5-9897-dd977371c1a3","id":"fD7XwFzP_1fG"},"execution_count":143,"outputs":[{"output_type":"stream","name":"stdout","text":["[5793428.35187284 5661337.14247794 4686079.73668873 ... 4054104.82092261\n"," 5086060.13889518 5216931.95107892]\n"]}]},{"cell_type":"code","source":["# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = abc_predict_Test_tuned_random_GS\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700778099834,"user_tz":420,"elapsed":193,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"c065f231-b0f5-4d2c-f52e-611b070edfe0","id":"ynBudaq3_1fH"},"execution_count":144,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id       revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  5.793428e+06    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1  5.661337e+06    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2  4.686080e+06    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3  4.185895e+06    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4  5.144900e+06    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["GB_GS = testData[['Id', 'revenue']].copy()\n","GB_GS = GB_GS.rename(columns={'revenue': 'Prediction'})\n","print(GB_GS)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700778104398,"user_tz":420,"elapsed":3143,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"97f23941-d386-4510-9888-d8f81722f0c8","id":"RSTQ8BCu_1fH"},"execution_count":145,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["GB_GS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/GradientBoosting_GS_25th.csv', index=False)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1700773805905,"user_tz":420,"elapsed":757,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"id":"PWHeJMhp_1fH"},"execution_count":67,"outputs":[]},{"cell_type":"code","source":["GB_GS.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/GradientBoosting_GS_Med.csv', index=False)"],"metadata":{"id":"_ffy1ppbFzrQ","executionInfo":{"status":"ok","timestamp":1700778105091,"user_tz":420,"elapsed":696,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":146,"outputs":[]},{"cell_type":"markdown","source":["### STACKING MODELS"],"metadata":{"id":"IvS5lgJ2aQFv"}},{"cell_type":"code","source":["from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor, StackingRegressor\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.metrics import mean_squared_error\n","from mlxtend.regressor import StackingCVRegressor\n","from sklearn.model_selection import RandomizedSearchCV, GridSearchCV"],"metadata":{"id":"chK6tA7PB6aZ","executionInfo":{"status":"ok","timestamp":1700778107209,"user_tz":420,"elapsed":223,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":147,"outputs":[]},{"cell_type":"code","source":["# Define base models\n","base_models = [\n","    ('gb', GradientBoostingRegressor()),\n","    ('rf', RandomForestRegressor()),\n","    ('dt', DecisionTreeRegressor())\n","]\n","\n","# Create the stacking model\n","stack_model = StackingRegressor(\n","    estimators=base_models,\n","    final_estimator=GradientBoostingRegressor(),  # You can change the final_estimator\n","    cv=4,  # Number of folds for cross-validation\n","    n_jobs=-1  # Use all available processors\n",")\n","\n","# Train the stacking model\n","stack_model.fit(X_train, y_train)\n","\n","# Predict on the training set\n","stack_predict_Train = stack_model.predict(X_train)\n","\n","# Calculate RMSE for the training set\n","train_rmse_stack = mean_squared_error(y_train, stack_predict_Train)\n","print(\"RMSE (training) for Stacking Ensemble: {:.10f}\".format(train_rmse_stack))\n","\n","# Predict on the test set\n","stack_predict_Test = stack_model.predict(X_test)\n","\n","# Calculate RMSE for the test set\n","test_rmse_stack = mean_squared_error(y_test, stack_predict_Test)\n","print(\"RMSE (Test Data) for Stacking Ensemble: {:.10f}\".format(test_rmse_stack))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UaPmU6_5aTRa","executionInfo":{"status":"ok","timestamp":1700778110153,"user_tz":420,"elapsed":2090,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"99fa302b-6168-4d9b-b89f-2e57ec7a0d16"},"execution_count":148,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Stacking Ensemble: 10577083509862.4179687500\n","RMSE (Test Data) for Stacking Ensemble: 33741591551530.1132812500\n"]}]},{"cell_type":"markdown","source":["Random Search"],"metadata":{"id":"7sRvJPDpCIG9"}},{"cell_type":"code","source":["# Random Search for Hyperparameter Tuning ========================================================\n","# Define the hyperparameter grid\n","param_dist = {\n","    'final_estimator__n_estimators': [50, 100, 150],\n","    'final_estimator__max_depth': [3, 4, 5],\n","    'final_estimator__min_samples_split': [2, 5, 10],\n","    'final_estimator__min_samples_leaf': [1, 2, 4],\n","    'final_estimator__learning_rate': [0.01, 0.1, 0.2]\n","}\n","\n","# Create the random search model\n","random_search = RandomizedSearchCV(\n","    stack_model,\n","    param_distributions=param_dist,\n","    n_iter=10,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1,\n","    random_state=42\n",")\n","\n","# Fit the random search model\n","random_search.fit(X_train, y_train)\n","\n","# Get the best parameters from random search\n","best_params_random = random_search.best_params_\n","print(\"Best Hyperparameters from Random Search:\", best_params_random)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rd9DhTlcCJri","executionInfo":{"status":"ok","timestamp":1700778178603,"user_tz":420,"elapsed":65802,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"a2459500-5609-4442-e4d5-eeeac87eb5bd"},"execution_count":149,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","Best Hyperparameters from Random Search: {'final_estimator__n_estimators': 50, 'final_estimator__min_samples_split': 10, 'final_estimator__min_samples_leaf': 4, 'final_estimator__max_depth': 3, 'final_estimator__learning_rate': 0.01}\n"]}]},{"cell_type":"code","source":["# Create the stacking model with best hyperparameters from Random Search\n","stack_model_random = StackingRegressor(\n","    estimators=base_models,\n","    final_estimator=GradientBoostingRegressor(\n","        n_estimators=50,\n","        min_samples_split=10,\n","        min_samples_leaf=4,\n","        max_depth=3,\n","        learning_rate=0.01\n","    ),\n","    cv=4,  # Number of folds for cross-validation\n","    n_jobs=-1  # Use all available processors\n",")\n","\n","# Train the stacking model\n","stack_model_random.fit(X_train, y_train)\n","\n","# Predict on the training set\n","stack_predict_Train_random = stack_model_random.predict(X_train)\n","\n","# Calculate RMSE for the training set\n","train_rmse_stack_random = mean_squared_error(y_train, stack_predict_Train_random)\n","print(\"RMSE (training) for Stacking Ensemble (Random Search): {:.10f}\".format(train_rmse_stack_random))\n","\n","# Predict on the test set\n","stack_predict_Test_random = stack_model_random.predict(X_test)\n","\n","# Calculate RMSE for the test set\n","test_rmse_stack_random = mean_squared_error(y_test, stack_predict_Test_random)\n","print(\"RMSE (Test Data) for Stacking Ensemble (Random Search): {:.10f}\".format(test_rmse_stack_random))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JO5wR_AXDpYG","executionInfo":{"status":"ok","timestamp":1700778207311,"user_tz":420,"elapsed":3228,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"a2782335-6534-49d9-80e5-9eaf84b43041"},"execution_count":150,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Stacking Ensemble (Random Search): 5449855101588.1367187500\n","RMSE (Test Data) for Stacking Ensemble (Random Search): 23689306228227.0781250000\n"]}]},{"cell_type":"code","source":["df_stacking=pd.DataFrame()\n","df_stacking['revenue'] = stack_predict_Test_random\n","\n","# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = stack_predict_Test_random\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"okV2szmyabhA","executionInfo":{"status":"ok","timestamp":1700778207487,"user_tz":420,"elapsed":4,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"c99f6b42-7786-4239-a847-ec7047dd0854"},"execution_count":151,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id       revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  4.984462e+06    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1  6.463879e+06    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2  4.639248e+06    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3  4.131496e+06    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4  5.955347e+06    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["STM = testData[['Id', 'revenue']].copy()\n","STM = STM.rename(columns={'revenue': 'Prediction'})\n","STM = STM.drop_duplicates()\n","print(STM)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3fsvm1t-b_kp","executionInfo":{"status":"ok","timestamp":1700778211735,"user_tz":420,"elapsed":2558,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"9a15d057-1305-4971-d1cf-2f8d1c113a9f"},"execution_count":152,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["STM.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/StackingModels_RS_25th.csv', index=False)"],"metadata":{"id":"2jXN9K9_cGn_","executionInfo":{"status":"ok","timestamp":1700774493453,"user_tz":420,"elapsed":1194,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["STM.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/StackingModels_RS_Med.csv', index=False)"],"metadata":{"id":"scfQbzi_F2wM","executionInfo":{"status":"ok","timestamp":1700778212327,"user_tz":420,"elapsed":594,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":153,"outputs":[]},{"cell_type":"markdown","source":["Grid Search"],"metadata":{"id":"3P6oG7W6D3qD"}},{"cell_type":"code","source":["# Grid Search for Hyperparameter Tuning ==========================================================\n","# Define the hyperparameter grid\n","param_grid = {\n","    'final_estimator__n_estimators': [50, 100, 150],\n","    'final_estimator__max_depth': [3, 4, 5],\n","    'final_estimator__min_samples_split': [2, 5, 10],\n","    'final_estimator__min_samples_leaf': [1, 2, 4],\n","    'final_estimator__learning_rate': [0.01, 0.1, 0.2]\n","}\n","\n","# Create the grid search model\n","grid_search = GridSearchCV(\n","    stack_model,\n","    param_grid=param_grid,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1\n",")\n","\n","# Fit the grid search model\n","grid_search.fit(X_train, y_train)\n","\n","# Get the best parameters from grid search\n","best_params_grid = grid_search.best_params_\n","print(\"Best Hyperparameters from Grid Search:\", best_params_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700779794217,"user_tz":420,"elapsed":1580444,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"a270ef4b-336b-4e7a-c310-d16d351814bb","id":"kcS3h4-mD3qD"},"execution_count":154,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 243 candidates, totalling 1215 fits\n","Best Hyperparameters from Grid Search: {'final_estimator__learning_rate': 0.01, 'final_estimator__max_depth': 3, 'final_estimator__min_samples_leaf': 1, 'final_estimator__min_samples_split': 5, 'final_estimator__n_estimators': 50}\n"]}]},{"cell_type":"code","source":["# Create the stacking model with best hyperparameters from Random Search\n","stack_model_random = StackingRegressor(\n","    estimators=base_models,\n","    final_estimator=GradientBoostingRegressor(\n","        n_estimators=50,\n","        min_samples_split=5,\n","        min_samples_leaf=1,\n","        max_depth=3,\n","        learning_rate=0.01\n","    ),\n","    cv=4,  # Number of folds for cross-validation\n","    n_jobs=-1  # Use all available processors\n",")\n","\n","# Train the stacking model\n","stack_model_random.fit(X_train, y_train)\n","\n","# Predict on the training set\n","stack_predict_Train_random = stack_model_random.predict(X_train)\n","\n","# Calculate RMSE for the training set\n","train_rmse_stack_random = mean_squared_error(y_train, stack_predict_Train_random)\n","print(\"RMSE (training) for Stacking Ensemble (Random Search): {:.10f}\".format(train_rmse_stack_random))\n","\n","# Predict on the test set\n","stack_predict_Test_random = stack_model_random.predict(X_test)\n","\n","# Calculate RMSE for the test set\n","test_rmse_stack_random = mean_squared_error(y_test, stack_predict_Test_random)\n","print(\"RMSE (Test Data) for Stacking Ensemble (Random Search): {:.10f}\".format(test_rmse_stack_random))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700779860739,"user_tz":420,"elapsed":8497,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"8d029ef7-b414-4da2-fae1-a864265dbb02","id":"VxIA_mN8D3qE"},"execution_count":155,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (training) for Stacking Ensemble (Random Search): 5584324136737.8378906250\n","RMSE (Test Data) for Stacking Ensemble (Random Search): 22892512144171.2578125000\n"]}]},{"cell_type":"code","source":["df_stacking=pd.DataFrame()\n","df_stacking['revenue'] = stack_predict_Test_random\n","\n","# Put the predictions into the 'revenue' column of testData\n","testData['revenue'] = stack_predict_Test_random\n","\n","# Display the updated testData DataFrame with the predictions\n","print(testData.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700779860956,"user_tz":420,"elapsed":221,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"9d94483c-5121-46ce-b12c-ca8ab8585818","id":"79RU2ZnqD3qE"},"execution_count":156,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id       revenue  P36  P9  P35  P23  P31  P16  P25   P4  P18  P33  P5  P19   P3  Type_DT  P37  P24  P20  P27  P26  P14  Id  Open Day  Open Month  P15\n","0   0  4.868102e+06    0   5    0    4    0    0    0  4.0    0    0   1    5  4.0        0    0    0    5  0.0  0.0    0   0        22           1    0\n","1   1  5.016655e+06    0   4    0    1    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   1        18           3    0\n","2   2  4.933974e+06    0   4    0    5    0    0    0  4.0    0    0   2    5  4.0        0    0    0    5  0.0  0.0    0   2        30          10    0\n","3   3  4.258752e+06    0   5    0    2    4    0    0  4.0    4    0   2    4  4.0        0    0    0    4  0.0  0.0    0   3         6           5    0\n","4   4  4.223305e+06    0   5    0    1    0    0    0  4.0    0    0   1    1  4.0        0    0    0    5  0.0  0.0    0   4        31           7    0\n"]}]},{"cell_type":"code","source":["STM = testData[['Id', 'revenue']].copy()\n","STM = STM.rename(columns={'revenue': 'Prediction'})\n","STM = STM.drop_duplicates()\n","print(STM)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700779864391,"user_tz":420,"elapsed":3436,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"outputId":"4dbedc63-0332-4a54-f47f-4ac6a638d9f4","id":"bPOMvBtyD3qE"},"execution_count":157,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["STM.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/StackingModels_GS_25th.csv', index=False)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1700776508548,"user_tz":420,"elapsed":789,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}},"id":"ZI3yG-CdD3qE"},"execution_count":86,"outputs":[]},{"cell_type":"code","source":["STM.to_csv('/content/drive/MyDrive/CIS508/HW4/Kaggle/StackingModels_GS_Med.csv', index=False)"],"metadata":{"id":"j6tbvaQwF9C5","executionInfo":{"status":"ok","timestamp":1700779864847,"user_tz":420,"elapsed":458,"user":{"displayName":"Meng Shan Lee","userId":"10625332375585760981"}}},"execution_count":158,"outputs":[]}]}